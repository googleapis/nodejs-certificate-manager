// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {
  Callback,
  CallOptions,
  Descriptors,
  ClientOptions,
  GrpcClientOptions,
  LROperation,
  PaginationCallback,
  GaxCall,
} from 'google-gax';

import {Transform} from 'stream';
import {RequestType} from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1/certificate_manager_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './certificate_manager_client_config.json';
import {operationsProtos} from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  API Overview
 *
 *  Certificates Manager API allows customers to see and manage all their TLS
 *  certificates.
 *
 *  Certificates Manager API service provides methods to manage certificates,
 *  group them into collections, and create serving configuration that can be
 *  easily applied to other Cloud resources e.g. Target Proxies.
 *
 *  Data Model
 *
 *  The Certificates Manager service exposes the following resources:
 *
 *  * `Certificate` which describes a single TLS certificate.
 *  * `CertificateMap` which describes a collection of certificates that can be
 *  attached to a target resource.
 *  * `CertificateMapEntry` which describes a single configuration entry that
 *  consists of a SNI and a group of certificates. It's a subresource of
 *  CertificateMap.
 *
 *  Certificate, CertificateMap and CertificateMapEntry IDs
 *  have to match "^[a-z0-9-]{1,63}$" regexp, which means that
 *  - only lower case letters, digits, and hyphen are allowed
 *  - length of the resource ID has to be in [1,63] range.
 *
 *  Provides methods to manage Cloud Certificate Manager entities.
 * @class
 * @memberof v1
 */
export class CertificateManagerClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _providedCustomServicePath: boolean;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  warn: (code: string, message: string, warnType?: string) => void;
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  certificateManagerStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CertificateManagerClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean | "rest"} [options.fallback] - Use HTTP fallback mode.
   *     Pass "rest" to use HTTP/1.1 REST API instead of gRPC.
   *     For more information, please check the
   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CertificateManagerClient;
    const servicePath =
      opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    this._providedCustomServicePath = !!(
      opts?.servicePath || opts?.apiEndpoint
    );
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback =
      opts?.fallback ??
      (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = this._gaxGrpc.auth as gax.GoogleAuth;

    // Set useJWTAccessWithScope on the auth object.
    this.auth.useJWTAccessWithScope = true;

    // Set defaultServicePath on the auth object.
    this.auth.defaultServicePath = staticMembers.servicePath;

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    } else if (opts.fallback === 'rest') {
      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      certificatePathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificates/{certificate}'
      ),
      certificateMapPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificateMaps/{certificate_map}'
      ),
      certificateMapEntryPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/certificateMaps/{certificate_map}/certificateMapEntries/{certificate_map_entry}'
      ),
      dnsAuthorizationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/dnsAuthorizations/{dns_authorization}'
      ),
      locationPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listCertificates: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificates'
      ),
      listCertificateMaps: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificateMaps'
      ),
      listCertificateMapEntries: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'certificateMapEntries'
      ),
      listDnsAuthorizations: new this._gaxModule.PageDescriptor(
        'pageToken',
        'nextPageToken',
        'dnsAuthorizations'
      ),
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const lroOptions: GrpcClientOptions = {
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
    };
    if (opts.fallback === 'rest') {
      lroOptions.protoJson = protoFilesRoot;
      lroOptions.httpRules = [
        {
          selector: 'google.cloud.location.Locations.GetLocation',
          get: '/v1/{name=projects/*/locations/*}',
        },
        {
          selector: 'google.cloud.location.Locations.ListLocations',
          get: '/v1/{name=projects/*}/locations',
        },
        {
          selector: 'google.longrunning.Operations.CancelOperation',
          post: '/v1/{name=projects/*/locations/*/operations/*}:cancel',
          body: '*',
        },
        {
          selector: 'google.longrunning.Operations.DeleteOperation',
          delete: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.GetOperation',
          get: '/v1/{name=projects/*/locations/*/operations/*}',
        },
        {
          selector: 'google.longrunning.Operations.ListOperations',
          get: '/v1/{name=projects/*/locations/*}/operations',
        },
      ];
    }
    this.operationsClient = this._gaxModule
      .lro(lroOptions)
      .operationsClient(opts);
    const createCertificateResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.Certificate'
    ) as gax.protobuf.Type;
    const createCertificateMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateCertificateResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.Certificate'
    ) as gax.protobuf.Type;
    const updateCertificateMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteCertificateResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteCertificateMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCertificateMapResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.CertificateMap'
    ) as gax.protobuf.Type;
    const createCertificateMapMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateCertificateMapResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.CertificateMap'
    ) as gax.protobuf.Type;
    const updateCertificateMapMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteCertificateMapResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteCertificateMapMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createCertificateMapEntryResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.CertificateMapEntry'
    ) as gax.protobuf.Type;
    const createCertificateMapEntryMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateCertificateMapEntryResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.CertificateMapEntry'
    ) as gax.protobuf.Type;
    const updateCertificateMapEntryMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteCertificateMapEntryResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteCertificateMapEntryMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const createDnsAuthorizationResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.DnsAuthorization'
    ) as gax.protobuf.Type;
    const createDnsAuthorizationMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const updateDnsAuthorizationResponse = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.DnsAuthorization'
    ) as gax.protobuf.Type;
    const updateDnsAuthorizationMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;
    const deleteDnsAuthorizationResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty'
    ) as gax.protobuf.Type;
    const deleteDnsAuthorizationMetadata = protoFilesRoot.lookup(
      '.google.cloud.certificatemanager.v1.OperationMetadata'
    ) as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createCertificate: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCertificateResponse.decode.bind(createCertificateResponse),
        createCertificateMetadata.decode.bind(createCertificateMetadata)
      ),
      updateCertificate: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCertificateResponse.decode.bind(updateCertificateResponse),
        updateCertificateMetadata.decode.bind(updateCertificateMetadata)
      ),
      deleteCertificate: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCertificateResponse.decode.bind(deleteCertificateResponse),
        deleteCertificateMetadata.decode.bind(deleteCertificateMetadata)
      ),
      createCertificateMap: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCertificateMapResponse.decode.bind(createCertificateMapResponse),
        createCertificateMapMetadata.decode.bind(createCertificateMapMetadata)
      ),
      updateCertificateMap: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCertificateMapResponse.decode.bind(updateCertificateMapResponse),
        updateCertificateMapMetadata.decode.bind(updateCertificateMapMetadata)
      ),
      deleteCertificateMap: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCertificateMapResponse.decode.bind(deleteCertificateMapResponse),
        deleteCertificateMapMetadata.decode.bind(deleteCertificateMapMetadata)
      ),
      createCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createCertificateMapEntryResponse.decode.bind(
          createCertificateMapEntryResponse
        ),
        createCertificateMapEntryMetadata.decode.bind(
          createCertificateMapEntryMetadata
        )
      ),
      updateCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateCertificateMapEntryResponse.decode.bind(
          updateCertificateMapEntryResponse
        ),
        updateCertificateMapEntryMetadata.decode.bind(
          updateCertificateMapEntryMetadata
        )
      ),
      deleteCertificateMapEntry: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteCertificateMapEntryResponse.decode.bind(
          deleteCertificateMapEntryResponse
        ),
        deleteCertificateMapEntryMetadata.decode.bind(
          deleteCertificateMapEntryMetadata
        )
      ),
      createDnsAuthorization: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createDnsAuthorizationResponse.decode.bind(
          createDnsAuthorizationResponse
        ),
        createDnsAuthorizationMetadata.decode.bind(
          createDnsAuthorizationMetadata
        )
      ),
      updateDnsAuthorization: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateDnsAuthorizationResponse.decode.bind(
          updateDnsAuthorizationResponse
        ),
        updateDnsAuthorizationMetadata.decode.bind(
          updateDnsAuthorizationMetadata
        )
      ),
      deleteDnsAuthorization: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteDnsAuthorizationResponse.decode.bind(
          deleteDnsAuthorizationResponse
        ),
        deleteDnsAuthorizationMetadata.decode.bind(
          deleteDnsAuthorizationMetadata
        )
      ),
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
      'google.cloud.certificatemanager.v1.CertificateManager',
      gapicConfig as gax.ClientConfig,
      opts.clientConfig || {},
      {'x-goog-api-client': clientHeader.join(' ')}
    );

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};

    // Add a warn function to the client constructor so it can be easily tested.
    this.warn = gax.warn;
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.certificateManagerStub) {
      return this.certificateManagerStub;
    }

    // Put together the "service stub" for
    // google.cloud.certificatemanager.v1.CertificateManager.
    this.certificateManagerStub = this._gaxGrpc.createStub(
      this._opts.fallback
        ? (this._protos as protobuf.Root).lookupService(
            'google.cloud.certificatemanager.v1.CertificateManager'
          )
        : // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.certificatemanager.v1
            .CertificateManager,
      this._opts,
      this._providedCustomServicePath
    ) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const certificateManagerStubMethods = [
      'listCertificates',
      'getCertificate',
      'createCertificate',
      'updateCertificate',
      'deleteCertificate',
      'listCertificateMaps',
      'getCertificateMap',
      'createCertificateMap',
      'updateCertificateMap',
      'deleteCertificateMap',
      'listCertificateMapEntries',
      'getCertificateMapEntry',
      'createCertificateMapEntry',
      'updateCertificateMapEntry',
      'deleteCertificateMapEntry',
      'listDnsAuthorizations',
      'getDnsAuthorization',
      'createDnsAuthorization',
      'updateDnsAuthorization',
      'deleteDnsAuthorization',
    ];
    for (const methodName of certificateManagerStubMethods) {
      const callPromise = this.certificateManagerStub.then(
        stub =>
          (...args: Array<{}>) => {
            if (this._terminated) {
              return Promise.reject('The client has already been closed.');
            }
            const func = stub[methodName];
            return func.apply(stub, args);
          },
        (err: Error | null | undefined) => () => {
          throw err;
        }
      );

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.certificateManagerStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'certificatemanager.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'certificatemanager.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return ['https://www.googleapis.com/auth/cloud-platform'];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(
    callback?: Callback<string, undefined, undefined>
  ): Promise<string> | void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  /**
   * Gets details of a single Certificate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate to describe. Must be in the format
   *   `projects/* /locations/* /certificates/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [Certificate]{@link google.cloud.certificatemanager.v1.Certificate}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificate_async
   */
  getCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificate,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificate(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificate,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificate(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificate,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.certificatemanager.v1.ICertificate,
          | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificate,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificate,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getCertificate(request, options, callback);
  }
  /**
   * Gets details of a single CertificateMap.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate map to describe. Must be in the format
   *   `projects/* /locations/* /certificateMaps/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CertificateMap]{@link google.cloud.certificatemanager.v1.CertificateMap}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificateMap_async
   */
  getCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMap,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMap,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMap,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.certificatemanager.v1.ICertificateMap,
          | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMap,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMap,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateMapRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getCertificateMap(request, options, callback);
  }
  /**
   * Gets details of a single CertificateMapEntry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate map entry to describe. Must be in the
   *   format `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [CertificateMapEntry]{@link google.cloud.certificatemanager.v1.CertificateMapEntry}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.get_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_GetCertificateMapEntry_async
   */
  getCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
          | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
      | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
      (
        | protos.google.cloud.certificatemanager.v1.IGetCertificateMapEntryRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getCertificateMapEntry(
      request,
      options,
      callback
    );
  }
  /**
   * Gets details of a single DnsAuthorization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the dns authorization to describe. Must be in the format
   *   `projects/* /locations/* /dnsAuthorizations/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing [DnsAuthorization]{@link google.cloud.certificatemanager.v1.DnsAuthorization}.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.get_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_GetDnsAuthorization_async
   */
  getDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
      (
        | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
        | undefined
      ),
      {} | undefined
    ]
  >;
  getDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest,
    options: CallOptions,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
      | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest,
    callback: Callback<
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
      | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): void;
  getDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
          | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
          | null
          | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
      | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
      | null
      | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
      (
        | protos.google.cloud.certificatemanager.v1.IGetDnsAuthorizationRequest
        | undefined
      ),
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.getDnsAuthorization(request, options, callback);
  }

  /**
   * Creates a new Certificate in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the certificate. Must be in the format
   *   `projects/* /locations/*`.
   * @param {string} request.certificateId
   *   Required. A user-provided name of the certificate.
   * @param {google.cloud.certificatemanager.v1.Certificate} request.certificate
   *   Required. A definition of the certificate to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificate_async
   */
  createCertificate(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createCertificate(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificate(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificate(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificate,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createCertificate(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createCertificate()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificate_async
   */
  async checkCreateCertificateProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.Certificate,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createCertificate,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.Certificate,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Updates a Certificate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.certificatemanager.v1.Certificate} request.certificate
   *   Required. A definition of the certificate to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificate_async
   */
  updateCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateCertificate(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificate(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificate,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificate,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        'certificate.name': request.certificate!.name || '',
      });
    this.initialize();
    return this.innerApiCalls.updateCertificate(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateCertificate()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificate_async
   */
  async checkUpdateCertificateProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.Certificate,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateCertificate,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.Certificate,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single Certificate.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate to delete. Must be in the format
   *   `projects/* /locations/* /certificates/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificate_async
   */
  deleteCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteCertificate(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificate(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificate(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCertificate(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteCertificate()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificate_async
   */
  async checkDeleteCertificateProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteCertificate,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new CertificateMap in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the certificate map. Must be in the format
   *   `projects/* /locations/*`.
   * @param {string} request.certificateMapId
   *   Required. A user-provided name of the certificate map.
   * @param {google.cloud.certificatemanager.v1.CertificateMap} request.certificateMap
   *   Required. A definition of the certificate map to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMap_async
   */
  createCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificateMap,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createCertificateMap(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `createCertificateMap()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMap_async
   */
  async checkCreateCertificateMapProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMap,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createCertificateMap,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMap,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Updates a CertificateMap.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.certificatemanager.v1.CertificateMap} request.certificateMap
   *   Required. A definition of the certificate map to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMap_async
   */
  updateCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificateMap,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMap,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        'certificate_map.name': request.certificateMap!.name || '',
      });
    this.initialize();
    return this.innerApiCalls.updateCertificateMap(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `updateCertificateMap()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMap_async
   */
  async checkUpdateCertificateMapProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMap,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateCertificateMap,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMap,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single CertificateMap. A Certificate Map can't be deleted
   * if it contains Certificate Map Entries. Remove all the entries from
   * the map before calling this method.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate map to delete. Must be in the format
   *   `projects/* /locations/* /certificateMaps/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMap_async
   */
  deleteCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificateMap(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificateMap(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCertificateMap(request, options, callback);
  }
  /**
   * Check the status of the long running operation returned by `deleteCertificateMap()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMap_async
   */
  async checkDeleteCertificateMapProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteCertificateMap,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new CertificateMapEntry in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the certificate map entry. Must be in the
   *   format `projects/* /locations/* /certificateMaps/*`.
   * @param {string} request.certificateMapEntryId
   *   Required. A user-provided name of the certificate map entry.
   * @param {google.cloud.certificatemanager.v1.CertificateMapEntry} request.certificateMapEntry
   *   Required. A definition of the certificate map entry to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMapEntry_async
   */
  createCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.ICreateCertificateMapEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createCertificateMapEntry(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createCertificateMapEntry()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateCertificateMapEntry_async
   */
  async checkCreateCertificateMapEntryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMapEntry,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createCertificateMapEntry,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMapEntry,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Updates a CertificateMapEntry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.certificatemanager.v1.CertificateMapEntry} request.certificateMapEntry
   *   Required. A definition of the certificate map entry to create map entry.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMapEntry_async
   */
  updateCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateCertificateMapEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.ICertificateMapEntry,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        'certificate_map_entry.name': request.certificateMapEntry!.name || '',
      });
    this.initialize();
    return this.innerApiCalls.updateCertificateMapEntry(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateCertificateMapEntry()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateCertificateMapEntry_async
   */
  async checkUpdateCertificateMapEntryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMapEntry,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateCertificateMapEntry,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.CertificateMapEntry,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single CertificateMapEntry.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the certificate map entry to delete. Must be in the format
   *   `projects/* /locations/* /certificateMaps/* /certificateMapEntries/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMapEntry_async
   */
  deleteCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificateMapEntry(
    request: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteCertificateMapEntry(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteCertificateMapEntryRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteCertificateMapEntry(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteCertificateMapEntry()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_certificate_map_entry.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteCertificateMapEntry_async
   */
  async checkDeleteCertificateMapEntryProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteCertificateMapEntry,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Creates a new DnsAuthorization in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The parent resource of the dns authorization. Must be in the format
   *   `projects/* /locations/*`.
   * @param {string} request.dnsAuthorizationId
   *   Required. A user-provided name of the dns authorization.
   * @param {google.cloud.certificatemanager.v1.DnsAuthorization} request.dnsAuthorization
   *   Required. A definition of the dns authorization to create.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateDnsAuthorization_async
   */
  createDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  createDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  createDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.ICreateDnsAuthorizationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.createDnsAuthorization(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `createDnsAuthorization()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.create_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_CreateDnsAuthorization_async
   */
  async checkCreateDnsAuthorizationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.DnsAuthorization,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.createDnsAuthorization,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.DnsAuthorization,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Updates a DnsAuthorization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {google.cloud.certificatemanager.v1.DnsAuthorization} request.dnsAuthorization
   *   Required. A definition of the dns authorization to update.
   * @param {google.protobuf.FieldMask} request.updateMask
   *   Required. The update mask applies to the resource. For the `FieldMask` definition,
   *   see
   *   https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateDnsAuthorization_async
   */
  updateDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  updateDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest,
    callback: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  updateDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IUpdateDnsAuthorizationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.cloud.certificatemanager.v1.IDnsAuthorization,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        'dns_authorization.name': request.dnsAuthorization!.name || '',
      });
    this.initialize();
    return this.innerApiCalls.updateDnsAuthorization(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `updateDnsAuthorization()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.update_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_UpdateDnsAuthorization_async
   */
  async checkUpdateDnsAuthorizationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.cloud.certificatemanager.v1.DnsAuthorization,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.updateDnsAuthorization,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.cloud.certificatemanager.v1.DnsAuthorization,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Deletes a single DnsAuthorization.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.name
   *   Required. A name of the dns authorization to delete. Must be in the format
   *   `projects/* /locations/* /dnsAuthorizations/*`.
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is an object representing
   *   a long running operation. Its `promise()` method returns a promise
   *   you can `await` for.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteDnsAuthorization_async
   */
  deleteDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest,
    options?: CallOptions
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  >;
  deleteDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest,
    options: CallOptions,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDnsAuthorization(
    request: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest,
    callback: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): void;
  deleteDnsAuthorization(
    request?: protos.google.cloud.certificatemanager.v1.IDeleteDnsAuthorizationRequest,
    optionsOrCallback?:
      | CallOptions
      | Callback<
          LROperation<
            protos.google.protobuf.IEmpty,
            protos.google.cloud.certificatemanager.v1.IOperationMetadata
          >,
          protos.google.longrunning.IOperation | null | undefined,
          {} | null | undefined
        >,
    callback?: Callback<
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | null | undefined,
      {} | null | undefined
    >
  ): Promise<
    [
      LROperation<
        protos.google.protobuf.IEmpty,
        protos.google.cloud.certificatemanager.v1.IOperationMetadata
      >,
      protos.google.longrunning.IOperation | undefined,
      {} | undefined
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        name: request.name || '',
      });
    this.initialize();
    return this.innerApiCalls.deleteDnsAuthorization(
      request,
      options,
      callback
    );
  }
  /**
   * Check the status of the long running operation returned by `deleteDnsAuthorization()`.
   * @param {String} name
   *   The operation name that will be passed.
   * @returns {Promise} - The promise which resolves to an object.
   *   The decoded operation object has result and metadata field to get information from.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.delete_dns_authorization.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_DeleteDnsAuthorization_async
   */
  async checkDeleteDnsAuthorizationProgress(
    name: string
  ): Promise<
    LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >
  > {
    const request = new operationsProtos.google.longrunning.GetOperationRequest(
      {name}
    );
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(
      operation,
      this.descriptors.longrunning.deleteDnsAuthorization,
      gax.createDefaultBackoffSettings()
    );
    return decodeOperation as LROperation<
      protos.google.protobuf.Empty,
      protos.google.cloud.certificatemanager.v1.OperationMetadata
    >;
  }
  /**
   * Lists Certificates in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificates to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificatesResponse`. Indicates that
   *   this is a continuation of a prior `ListCertificates` call, and that the
   *   system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates returned.
   * @param {string} request.orderBy
   *   A list of Certificate field names used to specify the order of the returned
   *   results. The default sorting order is ascending. To specify descending
   *   order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [Certificate]{@link google.cloud.certificatemanager.v1.Certificate}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCertificatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificates(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificate[],
      protos.google.cloud.certificatemanager.v1.IListCertificatesRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
    ]
  >;
  listCertificates(
    request: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificate
    >
  ): void;
  listCertificates(
    request: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificate
    >
  ): void;
  listCertificates(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
          | protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
          | null
          | undefined,
          protos.google.cloud.certificatemanager.v1.ICertificate
        >,
    callback?: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificate
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificate[],
      protos.google.cloud.certificatemanager.v1.IListCertificatesRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificatesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listCertificates(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificates to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificatesResponse`. Indicates that
   *   this is a continuation of a prior `ListCertificates` call, and that the
   *   system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates returned.
   * @param {string} request.orderBy
   *   A list of Certificate field names used to specify the order of the returned
   *   results. The default sorting order is ascending. To specify descending
   *   order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [Certificate]{@link google.cloud.certificatemanager.v1.Certificate} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCertificatesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificatesStream(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificates.createStream(
      this.innerApiCalls.listCertificates as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCertificates`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificates to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificatesResponse`. Indicates that
   *   this is a continuation of a prior `ListCertificates` call, and that the
   *   system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates returned.
   * @param {string} request.orderBy
   *   A list of Certificate field names used to specify the order of the returned
   *   results. The default sorting order is ascending. To specify descending
   *   order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [Certificate]{@link google.cloud.certificatemanager.v1.Certificate}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.list_certificates.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificates_async
   */
  listCertificatesAsync(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificatesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificate> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificates'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificates.asyncIterate(
      this.innerApiCalls['listCertificates'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificate>;
  }
  /**
   * Lists CertificateMaps in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate maps should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate maps to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapsResponse`. Indicates
   *   that this is a continuation of a prior `ListCertificateMaps` call, and that
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates Maps returned.
   * @param {string} request.orderBy
   *   A list of Certificate Map field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CertificateMap]{@link google.cloud.certificatemanager.v1.CertificateMap}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCertificateMapsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificateMaps(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMap[],
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
    ]
  >;
  listCertificateMaps(
    request: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMap
    >
  ): void;
  listCertificateMaps(
    request: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMap
    >
  ): void;
  listCertificateMaps(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
          | protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
          | null
          | undefined,
          protos.google.cloud.certificatemanager.v1.ICertificateMap
        >,
    callback?: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMap
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMap[],
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificateMapsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listCertificateMaps(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate maps should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate maps to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapsResponse`. Indicates
   *   that this is a continuation of a prior `ListCertificateMaps` call, and that
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates Maps returned.
   * @param {string} request.orderBy
   *   A list of Certificate Map field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CertificateMap]{@link google.cloud.certificatemanager.v1.CertificateMap} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCertificateMapsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificateMapsStream(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificateMaps'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificateMaps.createStream(
      this.innerApiCalls.listCertificateMaps as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCertificateMaps`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the certificate maps should be listed,
   *   specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate maps to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapsResponse`. Indicates
   *   that this is a continuation of a prior `ListCertificateMaps` call, and that
   *   the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Certificates Maps returned.
   * @param {string} request.orderBy
   *   A list of Certificate Map field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [CertificateMap]{@link google.cloud.certificatemanager.v1.CertificateMap}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_maps.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMaps_async
   */
  listCertificateMapsAsync(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMap> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificateMaps'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificateMaps.asyncIterate(
      this.innerApiCalls['listCertificateMaps'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMap>;
  }
  /**
   * Lists CertificateMapEntries in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project, location and certificate map from which the certificate map
   *   entries should be listed, specified in the format
   *   `projects/* /locations/* /certificateMaps/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate map entries to return. The service may return
   *   fewer than this value.
   *   If unspecified, at most 50 certificate map entries will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapEntriesResponse`.
   *   Indicates that this is a continuation of a prior
   *   `ListCertificateMapEntries` call, and that the system should return the
   *   next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the returned Certificate Map Entries.
   * @param {string} request.orderBy
   *   A list of Certificate Map Entry field names used to specify
   *   the order of the returned results. The default sorting order is ascending.
   *   To specify descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [CertificateMapEntry]{@link google.cloud.certificatemanager.v1.CertificateMapEntry}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listCertificateMapEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificateMapEntries(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry[],
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
    ]
  >;
  listCertificateMapEntries(
    request: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry
    >
  ): void;
  listCertificateMapEntries(
    request: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry
    >
  ): void;
  listCertificateMapEntries(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
          | protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
          | null
          | undefined,
          protos.google.cloud.certificatemanager.v1.ICertificateMapEntry
        >,
    callback?: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
      | protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.ICertificateMapEntry[],
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest | null,
      protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listCertificateMapEntries(
      request,
      options,
      callback
    );
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project, location and certificate map from which the certificate map
   *   entries should be listed, specified in the format
   *   `projects/* /locations/* /certificateMaps/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate map entries to return. The service may return
   *   fewer than this value.
   *   If unspecified, at most 50 certificate map entries will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapEntriesResponse`.
   *   Indicates that this is a continuation of a prior
   *   `ListCertificateMapEntries` call, and that the system should return the
   *   next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the returned Certificate Map Entries.
   * @param {string} request.orderBy
   *   A list of Certificate Map Entry field names used to specify
   *   the order of the returned results. The default sorting order is ascending.
   *   To specify descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [CertificateMapEntry]{@link google.cloud.certificatemanager.v1.CertificateMapEntry} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listCertificateMapEntriesAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listCertificateMapEntriesStream(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificateMapEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificateMapEntries.createStream(
      this.innerApiCalls.listCertificateMapEntries as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listCertificateMapEntries`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project, location and certificate map from which the certificate map
   *   entries should be listed, specified in the format
   *   `projects/* /locations/* /certificateMaps/*`.
   * @param {number} request.pageSize
   *   Maximum number of certificate map entries to return. The service may return
   *   fewer than this value.
   *   If unspecified, at most 50 certificate map entries will be returned.
   *   The maximum value is 1000; values above 1000 will be coerced to 1000.
   * @param {string} request.pageToken
   *   The value returned by the last `ListCertificateMapEntriesResponse`.
   *   Indicates that this is a continuation of a prior
   *   `ListCertificateMapEntries` call, and that the system should return the
   *   next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the returned Certificate Map Entries.
   * @param {string} request.orderBy
   *   A list of Certificate Map Entry field names used to specify
   *   the order of the returned results. The default sorting order is ascending.
   *   To specify descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [CertificateMapEntry]{@link google.cloud.certificatemanager.v1.CertificateMapEntry}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.list_certificate_map_entries.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_ListCertificateMapEntries_async
   */
  listCertificateMapEntriesAsync(
    request?: protos.google.cloud.certificatemanager.v1.IListCertificateMapEntriesRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listCertificateMapEntries'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listCertificateMapEntries.asyncIterate(
      this.innerApiCalls['listCertificateMapEntries'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.certificatemanager.v1.ICertificateMapEntry>;
  }
  /**
   * Lists DnsAuthorizations in a given project and location.
   *
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the dns authorizations should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of dns authorizations to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
   *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
   *   that the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Dns Authorizations returned.
   * @param {string} request.orderBy
   *   A list of Dns Authorization field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Promise} - The promise which resolves to an array.
   *   The first element of the array is Array of [DnsAuthorization]{@link google.cloud.certificatemanager.v1.DnsAuthorization}.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed and will merge results from all the pages into this array.
   *   Note that it can affect your quota.
   *   We recommend using `listDnsAuthorizationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDnsAuthorizations(
    request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    options?: CallOptions
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization[],
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest | null,
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
    ]
  >;
  listDnsAuthorizations(
    request: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    options: CallOptions,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
      | protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization
    >
  ): void;
  listDnsAuthorizations(
    request: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    callback: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
      | protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization
    >
  ): void;
  listDnsAuthorizations(
    request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    optionsOrCallback?:
      | CallOptions
      | PaginationCallback<
          protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
          | protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
          | null
          | undefined,
          protos.google.cloud.certificatemanager.v1.IDnsAuthorization
        >,
    callback?: PaginationCallback<
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
      | protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
      | null
      | undefined,
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization
    >
  ): Promise<
    [
      protos.google.cloud.certificatemanager.v1.IDnsAuthorization[],
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest | null,
      protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsResponse
    ]
  > | void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    } else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    this.initialize();
    return this.innerApiCalls.listDnsAuthorizations(request, options, callback);
  }

  /**
   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the dns authorizations should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of dns authorizations to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
   *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
   *   that the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Dns Authorizations returned.
   * @param {string} request.orderBy
   *   A list of Dns Authorization field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Stream}
   *   An object stream which emits an object representing [DnsAuthorization]{@link google.cloud.certificatemanager.v1.DnsAuthorization} on 'data' event.
   *   The client library will perform auto-pagination by default: it will call the API as many
   *   times as needed. Note that it can affect your quota.
   *   We recommend using `listDnsAuthorizationsAsync()`
   *   method described below for async iteration which you can stop as needed.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   */
  listDnsAuthorizationsStream(
    request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    options?: CallOptions
  ): Transform {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listDnsAuthorizations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDnsAuthorizations.createStream(
      this.innerApiCalls.listDnsAuthorizations as gax.GaxCall,
      request,
      callSettings
    );
  }

  /**
   * Equivalent to `listDnsAuthorizations`, but returns an iterable object.
   *
   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
   * @param {Object} request
   *   The request object that will be sent.
   * @param {string} request.parent
   *   Required. The project and location from which the dns authorizations should be
   *   listed, specified in the format `projects/* /locations/*`.
   * @param {number} request.pageSize
   *   Maximum number of dns authorizations to return per call.
   * @param {string} request.pageToken
   *   The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
   *   that this is a continuation of a prior `ListDnsAuthorizations` call, and
   *   that the system should return the next page of data.
   * @param {string} request.filter
   *   Filter expression to restrict the Dns Authorizations returned.
   * @param {string} request.orderBy
   *   A list of Dns Authorization field names used to specify the order of the
   *   returned results. The default sorting order is ascending. To specify
   *   descending order for a field, add a suffix " desc".
   * @param {object} [options]
   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
   * @returns {Object}
   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
   *   When you iterate the returned iterable, each element will be an object representing
   *   [DnsAuthorization]{@link google.cloud.certificatemanager.v1.DnsAuthorization}. The API will be called under the hood as needed, once per the page,
   *   so you can stop the iteration when you don't need more results.
   *   Please see the
   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
   *   for more details and examples.
   * @example <caption>include:samples/generated/v1/certificate_manager.list_dns_authorizations.js</caption>
   * region_tag:certificatemanager_v1_generated_CertificateManager_ListDnsAuthorizations_async
   */
  listDnsAuthorizationsAsync(
    request?: protos.google.cloud.certificatemanager.v1.IListDnsAuthorizationsRequest,
    options?: CallOptions
  ): AsyncIterable<protos.google.cloud.certificatemanager.v1.IDnsAuthorization> {
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers['x-goog-request-params'] =
      gax.routingHeader.fromParams({
        parent: request.parent || '',
      });
    const defaultCallSettings = this._defaults['listDnsAuthorizations'];
    const callSettings = defaultCallSettings.merge(options);
    this.initialize();
    return this.descriptors.page.listDnsAuthorizations.asyncIterate(
      this.innerApiCalls['listDnsAuthorizations'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.certificatemanager.v1.IDnsAuthorization>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified certificate resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate
   * @returns {string} Resource name string.
   */
  certificatePath(project: string, location: string, certificate: string) {
    return this.pathTemplates.certificatePathTemplate.render({
      project: project,
      location: location,
      certificate: certificate,
    });
  }

  /**
   * Parse the project from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .project;
  }

  /**
   * Parse the location from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .location;
  }

  /**
   * Parse the certificate from Certificate resource.
   *
   * @param {string} certificateName
   *   A fully-qualified path representing Certificate resource.
   * @returns {string} A string representing the certificate.
   */
  matchCertificateFromCertificateName(certificateName: string) {
    return this.pathTemplates.certificatePathTemplate.match(certificateName)
      .certificate;
  }

  /**
   * Return a fully-qualified certificateMap resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate_map
   * @returns {string} Resource name string.
   */
  certificateMapPath(
    project: string,
    location: string,
    certificateMap: string
  ) {
    return this.pathTemplates.certificateMapPathTemplate.render({
      project: project,
      location: location,
      certificate_map: certificateMap,
    });
  }

  /**
   * Parse the project from CertificateMap resource.
   *
   * @param {string} certificateMapName
   *   A fully-qualified path representing CertificateMap resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateMapName(certificateMapName: string) {
    return this.pathTemplates.certificateMapPathTemplate.match(
      certificateMapName
    ).project;
  }

  /**
   * Parse the location from CertificateMap resource.
   *
   * @param {string} certificateMapName
   *   A fully-qualified path representing CertificateMap resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateMapName(certificateMapName: string) {
    return this.pathTemplates.certificateMapPathTemplate.match(
      certificateMapName
    ).location;
  }

  /**
   * Parse the certificate_map from CertificateMap resource.
   *
   * @param {string} certificateMapName
   *   A fully-qualified path representing CertificateMap resource.
   * @returns {string} A string representing the certificate_map.
   */
  matchCertificateMapFromCertificateMapName(certificateMapName: string) {
    return this.pathTemplates.certificateMapPathTemplate.match(
      certificateMapName
    ).certificate_map;
  }

  /**
   * Return a fully-qualified certificateMapEntry resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} certificate_map
   * @param {string} certificate_map_entry
   * @returns {string} Resource name string.
   */
  certificateMapEntryPath(
    project: string,
    location: string,
    certificateMap: string,
    certificateMapEntry: string
  ) {
    return this.pathTemplates.certificateMapEntryPathTemplate.render({
      project: project,
      location: location,
      certificate_map: certificateMap,
      certificate_map_entry: certificateMapEntry,
    });
  }

  /**
   * Parse the project from CertificateMapEntry resource.
   *
   * @param {string} certificateMapEntryName
   *   A fully-qualified path representing CertificateMapEntry resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCertificateMapEntryName(certificateMapEntryName: string) {
    return this.pathTemplates.certificateMapEntryPathTemplate.match(
      certificateMapEntryName
    ).project;
  }

  /**
   * Parse the location from CertificateMapEntry resource.
   *
   * @param {string} certificateMapEntryName
   *   A fully-qualified path representing CertificateMapEntry resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCertificateMapEntryName(certificateMapEntryName: string) {
    return this.pathTemplates.certificateMapEntryPathTemplate.match(
      certificateMapEntryName
    ).location;
  }

  /**
   * Parse the certificate_map from CertificateMapEntry resource.
   *
   * @param {string} certificateMapEntryName
   *   A fully-qualified path representing CertificateMapEntry resource.
   * @returns {string} A string representing the certificate_map.
   */
  matchCertificateMapFromCertificateMapEntryName(
    certificateMapEntryName: string
  ) {
    return this.pathTemplates.certificateMapEntryPathTemplate.match(
      certificateMapEntryName
    ).certificate_map;
  }

  /**
   * Parse the certificate_map_entry from CertificateMapEntry resource.
   *
   * @param {string} certificateMapEntryName
   *   A fully-qualified path representing CertificateMapEntry resource.
   * @returns {string} A string representing the certificate_map_entry.
   */
  matchCertificateMapEntryFromCertificateMapEntryName(
    certificateMapEntryName: string
  ) {
    return this.pathTemplates.certificateMapEntryPathTemplate.match(
      certificateMapEntryName
    ).certificate_map_entry;
  }

  /**
   * Return a fully-qualified dnsAuthorization resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} dns_authorization
   * @returns {string} Resource name string.
   */
  dnsAuthorizationPath(
    project: string,
    location: string,
    dnsAuthorization: string
  ) {
    return this.pathTemplates.dnsAuthorizationPathTemplate.render({
      project: project,
      location: location,
      dns_authorization: dnsAuthorization,
    });
  }

  /**
   * Parse the project from DnsAuthorization resource.
   *
   * @param {string} dnsAuthorizationName
   *   A fully-qualified path representing DnsAuthorization resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromDnsAuthorizationName(dnsAuthorizationName: string) {
    return this.pathTemplates.dnsAuthorizationPathTemplate.match(
      dnsAuthorizationName
    ).project;
  }

  /**
   * Parse the location from DnsAuthorization resource.
   *
   * @param {string} dnsAuthorizationName
   *   A fully-qualified path representing DnsAuthorization resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromDnsAuthorizationName(dnsAuthorizationName: string) {
    return this.pathTemplates.dnsAuthorizationPathTemplate.match(
      dnsAuthorizationName
    ).location;
  }

  /**
   * Parse the dns_authorization from DnsAuthorization resource.
   *
   * @param {string} dnsAuthorizationName
   *   A fully-qualified path representing DnsAuthorization resource.
   * @returns {string} A string representing the dns_authorization.
   */
  matchDnsAuthorizationFromDnsAuthorizationName(dnsAuthorizationName: string) {
    return this.pathTemplates.dnsAuthorizationPathTemplate.match(
      dnsAuthorizationName
    ).dns_authorization;
  }

  /**
   * Return a fully-qualified location resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @returns {string} Resource name string.
   */
  locationPath(project: string, location: string) {
    return this.pathTemplates.locationPathTemplate.render({
      project: project,
      location: location,
    });
  }

  /**
   * Parse the project from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).project;
  }

  /**
   * Parse the location from Location resource.
   *
   * @param {string} locationName
   *   A fully-qualified path representing Location resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromLocationName(locationName: string) {
    return this.pathTemplates.locationPathTemplate.match(locationName).location;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    if (this.certificateManagerStub && !this._terminated) {
      return this.certificateManagerStub.then(stub => {
        this._terminated = true;
        stub.close();
        this.operationsClient.close();
      });
    }
    return Promise.resolve();
  }
}
